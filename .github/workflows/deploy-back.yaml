name: Push to Another Repository

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    container: pandoc/latex
    permissions:
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract part of repository name
        id: extract_repo_part
        run: |
          REPO_PART=${GITHUB_REPOSITORY##*/}
          echo "repo_part=$REPO_PART" >> $GITHUB_OUTPUT

      - name: Make request to @safe db
        id: safe
        uses: Artanty/http-request-action@main
        with:
          url: 'https://cs99850.tmweb.ru/safe/get'
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"projectId": "${{ steps.extract_repo_part.outputs.repo_part }}@github", "stage": "DEPLOY"}'
          retry: 5
          retryWait: 15000
          timeout: 30000
        
      - name: Check for TARGET_VERCEL_JSON in response
        id: check_vercel_json
        run: |
          JSON="${{ fromJson(steps.safe.outputs.response).data.TARGET_VERCEL_JSON }}"
          if [ -n "$JSON" ]; then
            echo "vercel_json_present=true" >> $GITHUB_OUTPUT
          else
            echo "vercel_json_present=false" >> $GITHUB_OUTPUT
          fi

      - name: Create vercel.json file if TARGET_VERCEL_JSON is present
        if: steps.check_vercel_json.outputs.vercel_json_present == 'true'
        run: |
          SOURCE="${{ fromJson(steps.safe.outputs.response).data.TARGET_VERCEL_JSON }}"
          JSON='{
            "version": 2,
            "builds": [
              {
                "src": "'"$SOURCE"'",
                "use": "@vercel/node"
              }
            ],
            "routes": [
              {
                "src": "/(.*)",
                "dest": "'"$SOURCE"'"
              }
            ],
            "installCommand": "npm install"
          }'
          echo "$JSON" > vercel.json

      - name: Remove .env from .gitignore
        run: |
          sed -i '/^\.env$/d' .gitignore
      
      - name: Create .env file
        run: |
          echo "APP_ID=${{ fromJson(steps.safe.outputs.response).data.APP_ID }}
          APP_WEBHOOK_SECRET=${{ fromJson(steps.safe.outputs.response).data.APP_WEBHOOK_SECRET }}
          APP_GIT_PAT=${{ fromJson(steps.safe.outputs.response).data.APP_GIT_PAT }}
          APP_CLIENT_ID=${{ fromJson(steps.safe.outputs.response).data.APP_CLIENT_ID }}
          APP_CLIENT_SECRET=${{ fromJson(steps.safe.outputs.response).data.APP_CLIENT_SECRET }}
          APP_PRIVATE_KEY=${{ fromJson(steps.safe.outputs.response).data.APP_PRIVATE_KEY }}" > .env

      - name: Set environment variables and push to another repository
        run: |
          echo "TARGET_GIT_TOKEN=${{ fromJson(steps.safe.outputs.response).data.GIT_PAT }}" >> $GITHUB_ENV
          echo "TARGET_GIT_USER=${{ fromJson(steps.safe.outputs.response).data.GIT_LOGIN }}" >> $GITHUB_ENV
          echo "TARGET_GIT_REPO=${{ fromJson(steps.safe.outputs.response).data.GIT_REPO }}" >> $GITHUB_ENV
      
      - name: Pushes to another repository
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ env.TARGET_GIT_TOKEN }}
        with:
          source-directory: '.'
          destination-github-username: ${{ env.TARGET_GIT_USER }}
          destination-repository-name: ${{ env.TARGET_GIT_REPO }}
          user-email: "onarlandlord@gmail.com"
          target-branch: main